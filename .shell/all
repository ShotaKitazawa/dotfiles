#!/bin/bash

# my function
function parse_yaml () {
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s=\"%s\"\n", vn, $2, $3);
      }
   }'
   return 0
}

# env
export EDITOR=vim
export PATH=$PATH:$HOME/bin
if [[ -x $(which ag) ]]; then export FZF_DEFAULT_COMMAND='ag -g ""'; fi
export FZF_DEFAULT_OPTS='--height 40% --reverse --border'

# alias
alias rm="rm -i"
alias cp="cp -i"
alias g="git"
alias ssh-keyadd="ssh-add ~/.ssh/id_rsa*"
alias ssh-showpub="ssh-keygen -yf"
alias vimtmp='vim `date +%Y%m%d-%H%M%S`.txt'
if [[ -x $(which colordiff) ]]; then alias diff='colordiff'; fi
if [[ -x $(which nvim) ]]; then alias vim='nvim'; fi
if [[ -x $(which kubectl) ]]; then alias k='kubectl';fi
if [[ -x $(which diff-so-fancy) ]]; then
  function difff (){
    diff -u $1 $2 | diff-so-fancy |less -R
  }
  function git-difff (){
    git diff --histogram $@ | diff-so-fancy | less -R
  }
fi

# for tmux
## when execute ssh, reflect tmux window_name in connection name
function ssh(){
  if ps x | grep -v grep | grep $PPID | grep tmux > /dev/null 2>&1; then
    local window_name=$(tmux display -p '#{window_name}')
    command ssh $@
    tmux rename-window $window_name
  else
    command ssh $@
  fi
}
## use fzf-tmux instead of fzf
#if ps x | grep -v grep | grep $PPID | grep tmux > /dev/null 2>&1; then
#  export FZF_TMUX=1
#  export FZF_TMUX_HEIGHT=10
#fi

# for fzf
## fbr - checkout git branch
fbr() {
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}
## fbrm - checkout git branch (including remote branches)
fbrm() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}
## fshow - git commit browser
fshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}
## fd - cd to selected directory
fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# setting for XXenv
if [ -d ~/.pyenv ]; then
  export PYENV_ROOT=$HOME/.pyenv
  export PATH=$PYENV_ROOT/bin:$PATH
  eval "$(pyenv init - --no-rehash)"
fi

if [ -d ~/.goenv ]; then
  export GOENV_ROOT=$HOME/.goenv
  export PATH=$GOENV_ROOT/bin:$PATH
  eval "$(goenv init - --no-rehash)"
  # TODO: シェルを開いた後に `goenv global XXX` しても GOPATH が変更されない
  export GOPATH=$HOME/go/$(goenv global)
  export PATH=$GOPATH/bin:$PATH
fi

# TODO: shell の PID 以外がgrepで引っ掛かる場合バグる
current_shell=$(ps aux | grep -v grep | grep " $$ " | awk -F" " '{print $NF}' | sed -e 's|^-||g')
if [ "${current_shell}" = "bash" ]; then
  . ~/.shell/bash/setting
  . ~/.shell/bash/completion
elif [ "${current_shell}" = "zsh" ]; then
  . ~/.shell/zsh/setting
  . ~/.shell/zsh/completion
  . ~/.shell/zsh/zplugin
fi

# for each OS
if [[ "$(uname)" = 'Darwin' ]]
then # macOS
  export OS='Mac'
  . $HOME/.shell/mac

elif [[ "$(uname -r)" =~ ^.*-Microsoft$ ]]
then # Windows Subsystem for Linux
  export OS='WSL'
  . $HOME/.shell/wsl

elif [[ "$(uname)" = 'Linux' ]]
then # Linux
  export OS='Linux'
  . $HOME/.shell/linux

elif [[ "$(uname)" = 'FreeBSD' ]]
then # FreeBSD
  export OS='FreeBSD'
  alias l='ls'
  alias ll='ls -lG'
  alias lll='ls -alG'
  alias updatedb='/usr/libexec/locate.updatedb'
fi

