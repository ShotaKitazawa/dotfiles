#!/bin/bash

set -u

cd $(cd $(dirname $0) && pwd)

LOGGER_STDOUT=${LOGGER_STDOUT:-'/dev/null'}
LOGGER_STDERR=${LOGGER_STDERR:-'/dev/null'}

switch_env () {
  if [[ "$(uname)" = 'Darwin' ]]; then
    echo $2
  elif [[ "$(uname -r)" =~ ^.*-Microsoft$ ]]; then
    echo $3
  elif [[ "$(uname)" = 'Linux' ]]; then
    echo $1
  elif [[ "$(uname)" = 'FreeBSD' ]]; then
    echo $4
  fi
}

_echo () {
  echo $@ | tee -a $LOGGER_STDOUT | tee -a $LOGGER_STDERR
}

# create $HOME/bin
if [ ! -e $HOME/bin ]; then mkdir $HOME/bin; fi

# install required application: yq
_echo "### install yq ###"
YQ_VERSION=2.3.0
curl -s0L https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_$(switch_env linux darwin linux)_amd64 -o $HOME/bin/yq > $LOGGER_STDOUT 2> $LOGGER_STDERR
chmod 0755 $HOME/bin/yq
_echo "-> installed"

# install from package.yml
_echo '### package.yml ###'
_file="./requirements/package.yml"
if [[ "$(switch_env linux mac wsl)" = 'mac' ]]; then
  # for macOS
  for i in $(seq 0 $(( $(yq r $_file "mac[*].command" | wc -l) - 1 ))); do
    eval $(yq r $_file "mac[$i].precommand") > $LOGGER_STDOUT 2> $LOGGER_STDERR
    for j in $(seq 0 $(( $(yq r $_file "mac[$i].list" | wc -l) - 1 ))); do
      _echo $(yq r $_file "mac[$i].command") $(yq r $_file "mac[$i].list[$j]")
      eval $(yq r $_file "mac[$i].command") $(yq r $_file "mac[$i].list[$j]") > $LOGGER_STDOUT 2> $LOGGER_STDERR
    done
  done
elif [[ "$(switch_env linux mac wsl)" = 'linux' ]]; then
  if [ -e /etc/redhat-release ]; then
    # for CentOS & RHEL
    for i in $(seq 0 $(( $(yq r $_file "redhat[*].command" | wc -l) - 1 ))); do
      eval $(yq r $_file "redhat[$i].precommand") > $LOGGER_STDOUT 2> $LOGGER_STDERR
      for j in $(seq 0 $(( $(yq r $_file "redhat[$i].list" | wc -l) - 1 ))); do
        _echo $(yq r $_file "redhat[$i].command") $(yq r $_file "redhat[$i].list[$j]")
        eval $(yq r $_file "redhat[$i].command") $(yq r $_file "redhat[$i].list[$j]") > $LOGGER_STDOUT 2> $LOGGER_STDERR
      done
    done
  fi
fi

# install from download.yml
_echo '### download.yml ###'
_file="./requirements/download.yml"
for i in $(seq 0 $(( $(yq r $_file "[*].name" | wc -l) - 1 ))); do
  if [[ $(yq r $_file "[$i].when_os") != "null" && $(yq r $_file "[$i].when_os") != "$(switch_env linux darwin wsl)" ]]; then continue; fi
  _echo "-> install $(yq r $_file "[$i].name")"
  case $(yq r $_file [$i].type) in
    "text")
      yq r $_file "[$i].contents" > $(eval echo $(yq r $_file [$i].path))
      ;;
    "clone")
      if [ -e $(eval echo $(yq r $_file "[$i].path")) ]; then
        _pwd=$(pwd)
        _target_path=$(yq r $_file "[$i].path")
        _version=$(yq r $_file "[$i].version")
        cd $(eval echo $_target_path)
        git fetch > $LOGGER_STDOUT 2> $LOGGER_STDERR
        git checkout $_version > $LOGGER_STDOUT 2> $LOGGER_STDERR
        cd $_pwd
        unset _version
        unset _target_path
        unset _pwd
      else
        git clone $(yq r $_file "[$i].url") -b $(yq r $_file "[$i].version") $(eval echo $(yq r $_file "[$i].path")) > $LOGGER_STDOUT 2> $LOGGER_STDERR
      fi
      ;;
    "curl")
      curl -sL $(yq r $_file "[$i].url") -o $(eval echo $(yq r $_file "[$i].path"))
      ;;
    "exec")
      _version=$(yq r $_file "[$i].version")
      eval $(yq r $_file "[$i].command") > $LOGGER_STDOUT 2> $LOGGER_STDERR
      unset _version
      ;;
  esac
  if [ "$(yq r $_file "[$i].mode")" != "null" ]; then
    chmod $(yq r $_file "[$i].mode") $(eval echo $(yq r $_file [$i].path))
  fi
  if [ "$(yq r $_file "[$i].option")" != "null" ]; then
    eval $(yq r $_file "[$i].option") > $LOGGER_STDOUT 2> $LOGGER_STDERR
  fi
done

# install from asdf.yml
_echo '### asdf.yml ###'
_file="./requirements/asdf.yml"
_asdf="$HOME/.asdf/bin/asdf"
_asdf_shims="$HOME/.asdf/shims"
for i in $(seq 0 $(( $(yq r $_file "[*].name" | wc -l) - 1 ))); do
  _echo "-> install $(yq r $_file "[$i].name") $(yq r $_file "[$i].version")"
  $_asdf plugin-add $(yq r $_file "[$i].name") > $LOGGER_STDOUT 2> $LOGGER_STDERR
  $_asdf install $(yq r $_file "[$i].name") $(yq r $_file "[$i].version") > $LOGGER_STDOUT 2> $LOGGER_STDERR
  $_asdf global $(yq r $_file "[$i].name") $(yq r $_file "[$i].version") > $LOGGER_STDOUT 2> $LOGGER_STDERR
  if [ "$(yq r $_file "[$i].packages")" == "null" ]; then continue; fi
  for j in $(seq 0 $(( $(yq r $_file "[$i].packages[*].command" | wc -l) - 1 ))); do
    eval $(yq r $_file "[$i].packages[$j].precommand") > $LOGGER_STDOUT 2> $LOGGER_STDERR
    for k in $(seq 0 $(( $(yq r $_file "[$i].packages[$j].list" | wc -l) - 1 ))); do
      _echo $_asdf_shims/$(yq r $_file "[$i].packages[$j].command") $(yq r $_file "[$i].packages[$j].list[$k]")
      $_asdf_shims/$(yq r $_file "[$i].packages[$j].command") $(yq r $_file "[$i].packages[$j].list[$k]") > $LOGGER_STDOUT 2> $LOGGER_STDERR
    done
  done
done
