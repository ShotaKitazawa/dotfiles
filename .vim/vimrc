filetype off
" dein.vim
""""""""""""""""""""""""""""""
" http://qiita.com/delphinus/items/00ff2c0ba972c6e41542
""""""""""""""""""""""""""""""
" vimrc に以下のように追記  

" プラグインが実際にインストールされるディレクトリ
let s:dein_dir = expand('~/.cache/dein')
" dein.vim 本体
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

" dein.vim がなければ github から落としてくる
if &runtimepath !~# '/dein.vim'
  if !isdirectory(s:dein_repo_dir)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
  endif
  execute 'set runtimepath^=' . fnamemodify(s:dein_repo_dir, ':p')
endif

" 設定開始
if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir)

  " プラグインリストを収めた TOML ファイル
  " 予め TOML ファイル（後述）を用意しておく
  let g:rc_dir    = expand('~/.vim/rc')
  let s:toml      = g:rc_dir . '/dein.toml'
  let s:lazy_toml = g:rc_dir . '/dein_lazy.toml'

  " TOML を読み込み、キャッシュしておく
  call dein#load_toml(s:toml,      {'lazy': 0})
  call dein#load_toml(s:lazy_toml, {'lazy': 1})

  " 設定終了
  call dein#end()
  call dein#save_state()
endif

" もし、未インストールものものがあったらインストール
if dein#check_install()
  call dein#install()
endif
""""""""""""""""""""""""""""""


" Color
"""""""""""""""""""""""""""""
colorscheme hybrid
"colorscheme jellybeans
"colorscheme molokai
"""""""""""""""""""""""""""""

" Status Line
"""""""""""""""""""""""""""""
" ファイル名表示
set statusline=%F
" 変更チェック表示
set statusline+=%m
" 読み込み専用かどうか表示
set statusline+=%r
" ヘルプページなら[HELP]と表示
set statusline+=%h
" プレビューウインドウなら[Prevew]と表示
set statusline+=%w
" これ以降は右寄せ表示
set statusline+=%=
" file encoding
set statusline+=[ENC=%{&fileencoding}]
" 現在行数/全行数
set statusline+=[LOW=%l/%L]
" ステータスラインを常に表示(0:表示しない、1:2つ以上ウィンドウがある時だけ表示)
set laststatus=2
" itchyny/lightline.vim
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"⭤":""}',
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \ },
      \ 'separator': { 'left': '⮀', 'right': '⮂' },
      \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
      \ }
"""""""""""""""""""""""""""""

" scrooloose/nerdtree
"""""""""""""""""""""""""""""
nnoremap :tree :NERDTreeToggle
"""""""""""""""""""""""""""""

" kana/vim-submode
"""""""""""""""""""""""""""""
" http://nanasi.jp/articles/howto/file/expand.html
"""""""""""""""""""""""""""""
" s キーを無効化
nnoremap s <Nop>
" s[h|j|k|l] で窓移動
nnoremap sj <C-w>j
nnoremap sk <C-w>k
nnoremap sl <C-w>l
nnoremap sh <C-w>h
" s[H|J|K|L] で窓移動&入れ替え
nnoremap sJ <C-w>J
nnoremap sK <C-w>K
nnoremap sL <C-w>L
nnoremap sH <C-w>H
" s[n|p] でタブ移動
nnoremap sn gt
nnoremap sp gT
"
nnoremap sr <C-w>r
nnoremap s= <C-w>=
nnoremap sN :<C-u>bn<CR>
nnoremap sP :<C-u>bp<CR>
" 次窓へ移動
nnoremap sw <C-w>w
" 自窓を縦に最大拡張
nnoremap so <C-w>_<C-w>|
" 各窓を均等にする
nnoremap sO <C-w>=
" 新タブ作成
nnoremap st :<C-u>tabnew<CR>
" 新Unite tab作成
nnoremap sT :<C-u>Unite tab<CR>
" 縦に新窓作成
nnoremap ss :<C-u>sp<CR>
" 横に新窓作成
nnoremap sv :<C-u>vs<CR>
" 1窓終了
nnoremap sq :<C-u>q<CR>
" 全窓終了
nnoremap sQ :<C-u>bd<CR>
nnoremap sb :<C-u>Unite buffer_tab -buffer-name=file<CR>
nnoremap sB :<C-u>Unite buffer -buffer-name=file<CR>
" s[<|>] で窓を左右拡張
" s[+|-] で窓を上下拡張
call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
call submode#map('bufmove', 'n', '', '>', '<C-w>>')
call submode#map('bufmove', 'n', '', '<', '<C-w><')
call submode#map('bufmove', 'n', '', '+', '<C-w>+')
call submode#map('bufmove', 'n', '', '-', '<C-w>-')
"""""""""""""""""""""""""""""

" tyru/open-browser.vim
"""""""""""""""""""""""""""""
" カーソル下のURLをブラウザで開く
nnoremap <Leader>o <Plug>(openbrowser-open)
vnoremap <Leader>o <Plug>(openbrowser-open)
" ググる
nnoremap <Leader>g :<C-u>OpenBrowserSearch<Space><C-r><C-w><Enter>
"""""""""""""""""""""""""""""

" vim-scripts/vim-auto-save
"""""""""""""""""""""""""""""
" すかさずファイルを自動保存
let g:auto_save = 1
"""""""""""""""""""""""""""""

" bronson/vim-trailing-whitespace
""""""""""""""""""""""""""""""
noremap fw :FixWhitespace<CR>
""""""""""""""""""""""""""""""

" http://inari.hatenablog.com/entry/2014/05/05/231307
""""""""""""""""""""""""""""""
" 全角スペースの表示
""""""""""""""""""""""""""""""
function! ZenkakuSpace()
    highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
endfunction

if has('syntax')
    augroup ZenkakuSpace
        autocmd!
        autocmd ColorScheme * call ZenkakuSpace()
        autocmd VimEnter,WinEnter,BufRead * let w:m1=matchadd('ZenkakuSpace', '　')
    augroup END
    call ZenkakuSpace()
endif
""""""""""""""""""""""""""""""

" Other setting (not plugin)
"""""""""""""""""""""""""""""
" :source $VIMRUNTIME/syntax/syntax.vim
syntax enable
" vi 互換の動作を無効
set nocompatible
" UTF-8
set encoding=utf-8
" 検索時、小文字 > 大文字小文字にマッチ、大文字 > 大文字のみにマッチ
set ignorecase
set smartcase
" 行をまたいで BS 可能
set backspace=indent,eol,start
" undofile の作成、~/vimundo/ 以下に保存
set undofile
set undodir=~/vimundo/
" ヤンクしたテキストそのままクリップボードにコピー
" vim上でハイライトして選択したテキストがクリップボードにコピー
set clipboard=unnamed,autoselect
" 背景黒
set background=dark
" 検索結果をハイライト
set hlsearch
" カーソルの位置表示を行う
set ruler
" 行数表示
"set number
" ウインドウタイトルを設定する
set title
" インクリメンタルサーチ
set incsearch
" コマンドラインモードにてTab保管を有効にする
set wildmenu wildmode=list:full
" マウスを使用できるようにする
set mouse=a
set ttymouse=xterm2
" 自動インデント
set autoindent
" インデント幅 2
set shiftwidth=2
" タブ幅 2
set tabstop=2
" カッコ対応にハイライト3秒
set showmatch
set matchpairs& matchpairs+=<:>
set matchtime=3
" 全角記号を正しく表示
set ambiwidth=double
" :w!! でrootユーザで :w しに行く
cnoremap w!! w !sudo tee > /dev/null %
" C-z でインクリメント
noremap <C-z> <C-a>
" C-a で一番前、C-e で一番後ろ
inoremap <C-e> <Esc>$a
inoremap <C-a> <Esc>^i
noremap <C-e> $
noremap <C-a> ^
" C-h で一行上、C-l で一行下
noremap <C-h> <C-y>
noremap <C-l> <C-e>
" 行が折り返し表示されていた場合、行単位ではなく表示行単位でカーソルを移動する
nnoremap j gj
nnoremap k gk
nnoremap <down> gj
nnoremap <up> gk
" PP で Visual モードでペーストする時連続コピペ可能
noremap PP "0p
" x でも字を消した時クリップボードに保存しない
noremap x "_x
" ESC*2 で nohighlight
noremap <ESC><ESC> :noh<CR>
" vimrc をすぐ開く
nnoremap <space>. :<c-u>new ~/.vim/vimrc<CR>
" j*2 で ESC
inoremap jj <ESC>
" Syntax Highlight
autocmd Syntax * call matchadd('Todo',  '\W\zs\(TODO\|FIXME\|CHANGED\|XXX\|BUG\|HACK\)')
autocmd Syntax * call matchadd('Debug', '\W\zs\(NOTE\|INFO\|IDEA\)')
" 不可視文字を表示する
set list
" タブを >--- で表示
set listchars=tab:>-
" 入力中のコマンドを表示する
set showcmd
" 前回のカーソル位置の復元
autocmd BufReadPost * if line("'\"") > 0 && line ("'\"") <= line("$") | exe "normal! g'\"" | endif
"""""""""""""""""""""""""""""


" MacVim setting
"""""""""""""""""""""""""""""
if has('gui_macvim')
	"colorschme macvim
	set background=dark
	silent! colorscheme jellybeans
	set showtabline=2	" タブを常に表示
	set imdisable	" IMを無効化
	set transparency=10	" 透明度を指定
	set antialias
	set guifont=Monaco:h18
	set fuoptions=maxvert,maxhorz
	" Command-v で貼り付け
	source $VIMRUNTIME/mswin.vim
	" C-v でビジュアル短形 (mswin.vim のせいでこれがないと貼り付けになる)
	noremap <C-v> <C-v>
endif
"""""""""""""""""""""""""""""

" read other files
"""""""""""""""""""""""""""""
filetype plugin indent on
autocmd BufRead,BufNewFile *.py setfiletype python.vim
autocmd BufRead,BufNewFile *.cpp setfiletype cpp.vim
autocmd BufRead,BufNewFile *.c setfiletype c.vim
autocmd BufRead,BufNewFile *.cc setfiletype cc.vim
autocmd BufRead,BufNewFile *.h setfiletype h.vim
autocmd BufRead,BufNewFile *.html setfiletype html.vim
autocmd BufRead,BufNewFile *.htm setfiletype html.vim


