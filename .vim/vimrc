filetype off

" MacVim setting
"""""""""""""""""""""""""""""
if has('gui_macvim')
  "colorschme macvim
  set background=dark
  silent! colorscheme jellybeans
  set showtabline=2  " タブを常に表示
  set imdisable  " IMを無効化
  set transparency=10  " 透明度を指定
  set antialias
  set guifont=Monaco:h18
  set fuoptions=maxvert,maxhorz
  noremap <D-v> p
  noremap <C-v> <C-v>
  noremap <C-f> <C-f>
endif
"""""""""""""""""""""""""""""

" dein.vim
""""""""""""""""""""""""""""""
" http://qiita.com/delphinus/items/00ff2c0ba972c6e41542
""""""""""""""""""""""""""""""
" vimrc に以下のように追記

" プラグインが実際にインストールされるディレクトリ
let s:dein_dir = expand('~/.cache/dein')
" dein.vim 本体
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

" dein.vim がなければ github から落としてくる
if &runtimepath !~# '/dein.vim'
  if !isdirectory(s:dein_repo_dir)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
  endif
  execute 'set runtimepath^=' . fnamemodify(s:dein_repo_dir, ':p')
endif

" 設定開始
if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir)

  " プラグインリストを収めた TOML ファイル
  " 予め TOML ファイル（後述）を用意しておく
  let g:rc_dir    = expand('~/.vim/rc')
  let s:toml      = g:rc_dir . '/dein.toml'
  let s:lazy_toml = g:rc_dir . '/dein_lazy.toml'

  " TOML を読み込み、キャッシュしておく
  call dein#load_toml(s:toml,      {'lazy': 0})
  call dein#load_toml(s:lazy_toml, {'lazy': 1})

  " 設定終了
  call dein#end()
  call dein#save_state()
endif

" もし、未インストールものものがあったらインストール
if dein#check_install()
  call dein#install()
endif
""""""""""""""""""""""""""""""

" Color
"""""""""""""""""""""""""""""
colorscheme hybrid
"colorscheme jellybeans
"colorscheme molokai
"colorscheme wombat
" 行番号の色
autocmd ColorScheme * highlight LineNr ctermfg=30
"""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""
" http://qiita.com/hide/items/229ff9460e75426a2d07
"""""""""""""""""""""""""""""
" Shougo/neocomplcache.vim
"""""""""""""""""""""""""""""
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : ''
    \ }

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplcache#smart_close_popup() . "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()
"""""""""""""""""""""""""""""

" Status Line
"""""""""""""""""""""""""""""
" ファイル名表示
set statusline=%F
" Git
set statusline+=%{fugitive#statusline()}
" 変更チェック表示
set statusline+=%m
" 読み込み専用かどうか表示
set statusline+=%r
" ヘルプページなら[HELP]と表示
set statusline+=%h
" プレビューウインドウなら[Prevew]と表示
set statusline+=%w
" これ以降は右寄せ表示
set statusline+=%=
" file encoding
set statusline+=[ENC=%{&fileencoding}]
" 現在行数/全行数
set statusline+=[LOW=%l/%L]
" ステータスラインを常に表示(0:表示しない、1:2つ以上ウィンドウがある時だけ表示)
set laststatus=2
" itchyny/lightline.vim
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename', 'fugitive' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"⭤":""}',
      \   'fugitive': '%{fugitive#statusline()}',
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \ },
      \ 'separator': { 'left': '⮀', 'right': '⮂' },
      \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
      \ }
"""""""""""""""""""""""""""""

" scrooloose/nerdtree
"""""""""""""""""""""""""""""
nnoremap :tree :NERDTreeToggle
"""""""""""""""""""""""""""""

" kana/vim-submode
"""""""""""""""""""""""""""""
" http://nanasi.jp/articles/howto/file/expand.html
"""""""""""""""""""""""""""""
" s キーを無効化
nnoremap s <Nop>
" s[h|j|k|l] で窓移動
nnoremap sj <C-w>j
noremap sk <C-w>k
nnoremap sl <C-w>l
nnoremap sh <C-w>h
" s[H|J|K|L] で窓移動&入れ替え
nnoremap sJ <C-w>J
nnoremap sK <C-w>K
nnoremap sL <C-w>L
nnoremap sH <C-w>H
" s[n|p] でタブ移動
nnoremap sn gt
nnoremap sp gT
"
nnoremap sr <C-w>r
nnoremap s= <C-w>=
nnoremap sN :<C-u>bn<CR>
nnoremap sP :<C-u>bp<CR>
" 次窓へ移動
nnoremap sw <C-w>w
" 自窓を縦に最大拡張
nnoremap so <C-w>_<C-w>|
" 各窓を均等にする
nnoremap sO <C-w>=
" 新タブ作成
nnoremap st :<C-u>tabnew<CR>
" 新Unite tab作成
nnoremap sT :<C-u>Unite tab<CR>
" 縦に新窓作成
nnoremap ss :<C-u>sp<CR>
" 横に新窓作成
nnoremap sv :<C-u>vs<CR>
" 1窓終了
nnoremap sq :<C-u>q<CR>
" 全窓終了
nnoremap sQ :<C-u>bd<CR>
"
nnoremap sb :<C-u>Unite buffer_tab -buffer-name=file<CR>
nnoremap sB :<C-u>Unite buffer -buffer-name=file<CR>
" s[<|>] で窓を左右拡張
" s[+|-] で窓を上下拡張
call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
call submode#map('bufmove', 'n', '', '>', '<C-w>>')
call submode#map('bufmove', 'n', '', '<', '<C-w><')
call submode#map('bufmove', 'n', '', '+', '<C-w>+')
call submode#map('bufmove', 'n', '', '-', '<C-w>-')
"""""""""""""""""""""""""""""

" tyru/open-browser.vim
"""""""""""""""""""""""""""""
" カーソル下のURLをブラウザで開く
nnoremap <Leader>o <Plug>(openbrowser-open)
vnoremap <Leader>o <Plug>(openbrowser-open)
" ググる
nnoremap <Leader>g :<C-u>OpenBrowserSearch<Space><C-r><C-w><Enter>
"""""""""""""""""""""""""""""

" vim-scripts/vim-auto-save
"""""""""""""""""""""""""""""
" すかさずファイルを自動保存
let g:auto_save = 1
"""""""""""""""""""""""""""""

" bronson/vim-trailing-whitespace
" + Tab をスペース2つに変換
""""""""""""""""""""""""""""""
noremap fw :FixWhitespace<CR>:%s/\t/  /g<CR>
""""""""""""""""""""""""""""""

" tpope/vim-fugitive
""""""""""""""""""""""""""""""
nnoremap :gs :Gstatus
nnoremap :ga :Gwrite
nnoremap :gr :Gread
nnoremap :gc :Gcommit
nnoremap :gb :Gblame
nnoremap :gd :Gdiff
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" plasticboy/vim-markdown + kannokanno/previm + tyru/open-browser.vim
""""""""""""""""""""""""""""""
" http://qiita.com/uedatakeshi/items/31761b87ba8ecbaf2c1e
""""""""""""""""""""""""""""""
au BufRead,BufNewFile *.md set filetype=markdown
let g:previm_open_cmd = 'open -a Firefox'
nnoremap :md :PrevimOpen
""""""""""""""""""""""""""""""

" http://inari.hatenablog.com/entry/2014/05/05/231307
""""""""""""""""""""""""""""""
" 全角スペースの表示
""""""""""""""""""""""""""""""
function! ZenkakuSpace()
    highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
endfunction

if has('syntax')
    augroup ZenkakuSpace
        autocmd!
        autocmd ColorScheme * call ZenkakuSpace()
        autocmd VimEnter,WinEnter,BufRead * let w:m1=matchadd('ZenkakuSpace', '　')
    augroup END
    call ZenkakuSpace()
endif
""""""""""""""""""""""""""""""

" http://d.hatena.ne.jp/rdera/20081022/1224682665
""""""""""""""""""""""""""""""
" バイナリ編集(xxd)モード（vim -b での起動、もしくは *.bin ファイルを開くと発動します）
""""""""""""""""""""""""""""""
augroup BinaryXXD
  autocmd!
  autocmd BufReadPre  *.bin let &binary =1
  "autocmd BufReadPre  *.sys let &binary =1
  autocmd BufReadPost * if &binary | silent %!xxd -g 1
  autocmd BufReadPost * set ft=xxd | endif
  autocmd BufWritePre * if &binary | %!xxd -r | endif
  autocmd BufWritePost * if &binary | silent %!xxd -g 1
  autocmd BufWritePost * set nomod | endif
augroup END
""""""""""""""""""""""""""""""

" Other setting (not plugin)
"""""""""""""""""""""""""""""
" :source $VIMRUNTIME/syntax/syntax.vim
syntax enable
" vi 互換の動作を無効
set nocompatible
" UTF-8
set encoding=utf-8
" 検索時、小文字 > 大文字小文字にマッチ、大文字 > 大文字のみにマッチ
set ignorecase
set smartcase
" 行をまたいで BS 可能
set backspace=indent,eol,start
"" undofile の作成、~/.vimundo/ 以下に保存
set undofile
set undodir=~/.vimundo/
" ヤンクしたテキストそのままクリップボードにコピー
" vim上でハイライトして選択したテキストがクリップボードにコピー
set clipboard=unnamed,autoselect
" スワップファイルを作らない
set noswapfile
" 背景黒
set background=dark
" 検索結果をハイライト
set hlsearch
" カーソルの位置表示を行う
set ruler
"" 行数表示
set number
" ウインドウタイトルを設定する
set title
" インクリメンタルサーチ
set incsearch
" コマンドラインモードにてTab保管を有効にする
set wildmenu wildmode=list:full
" マウスを使用できるようにする
set mouse=a
set ttymouse=xterm2
"" C言語用自動インデント
set cindent
" TAB をスペースにする
set expandtab
" インデント幅 2
set shiftwidth=2
" タブ幅 2
set tabstop=2
" カッコ対応にハイライト3秒
set showmatch
set matchpairs& matchpairs+=<:>
set matchtime=3
" 全角記号を正しく表示
set ambiwidth=double
" :w!! でrootユーザで :w しに行く
cnoremap w!! w !sudo tee > /dev/null %
" C-w でインクリメント
noremap <C-w> <C-a>
" C-a で一番前、C-e で一番後ろ
inoremap <C-e> <Esc>$a
inoremap <C-a> <Esc>^i
noremap <C-e> $
noremap <C-a> ^
" C-h で一行下、C-l で一行上
noremap <C-l> <C-y>
noremap <C-h> <C-e>
" 行が折り返し表示されていた場合、行単位ではなく表示行単位でカーソルを移動する
nnoremap j gj
nnoremap k gk
nnoremap <down> gj
nnoremap <up> gk
" PP で Visual モードでペーストする時連続コピペ可能
noremap PP "0p
" x でも字を消した時クリップボードに保存しない
noremap x "_x
" ESC*2 で nohighlight
noremap <ESC><ESC> :noh<CR>
" vimrc をすぐ開く
nnoremap <space>. :<c-u>new ~/.vim/vimrc<CR>
" C-c で ESC
noremap <C-c> <ESC>
" j*2 で ESC
inoremap jj <ESC>
" Syntax Highlight
autocmd Syntax * call matchadd('Todo',  '\W\zs\(TODO\|FIXME\|CHANGED\|XXX\|BUG\|HACK\)')
autocmd Syntax * call matchadd('Debug', '\W\zs\(NOTE\|INFO\|IDEA\)')
" 不可視文字を表示する
set list
" タブを >--- で表示
set listchars=tab:>-
" 入力中のコマンドを表示する
set showcmd
" 前回のカーソル位置の復元
autocmd BufReadPost * if line("'\"") > 0 && line ("'\"") <= line("$") | exe "normal! g'\"" | endif

" TODO: irc の NOTICE にハイライト (RAT)
"""""""""""""""""""""""""""""

" read other files
"""""""""""""""""""""""""""""
filetype plugin indent on
autocmd BufRead,BufNewFile *.py setfiletype python.vim
autocmd BufRead,BufNewFile *.cpp setfiletype cpp.vim
autocmd BufRead,BufNewFile *.c setfiletype c.vim
autocmd BufRead,BufNewFile *.cc setfiletype cc.vim
autocmd BufRead,BufNewFile *.h setfiletype h.vim
autocmd BufRead,BufNewFile *.html setfiletype html.vim
autocmd BufRead,BufNewFile *.htm setfiletype html.vim
autocmd BufRead,BufNewFile *.go setfiletype go.vim
